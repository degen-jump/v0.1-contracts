{
  "language": "Solidity",
  "sources": {
    "@cryptoalgebra/integral-core/contracts/interfaces/IAlgebraFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\npragma abicoder v2;\r\n\r\nimport './plugin/IAlgebraPluginFactory.sol';\r\nimport './vault/IAlgebraVaultFactory.sol';\r\n\r\n/// @title The interface for the Algebra Factory\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraFactory {\r\n  /// @notice Emitted when a process of ownership renounce is started\r\n  /// @param timestamp The timestamp of event\r\n  /// @param finishTimestamp The timestamp when ownership renounce will be possible to finish\r\n  event RenounceOwnershipStart(uint256 timestamp, uint256 finishTimestamp);\r\n\r\n  /// @notice Emitted when a process of ownership renounce cancelled\r\n  /// @param timestamp The timestamp of event\r\n  event RenounceOwnershipStop(uint256 timestamp);\r\n\r\n  /// @notice Emitted when a process of ownership renounce finished\r\n  /// @param timestamp The timestamp of ownership renouncement\r\n  event RenounceOwnershipFinish(uint256 timestamp);\r\n\r\n  /// @notice Emitted when a pool is created\r\n  /// @param token0 The first token of the pool by address sort order\r\n  /// @param token1 The second token of the pool by address sort order\r\n  /// @param pool The address of the created pool\r\n  event Pool(address indexed token0, address indexed token1, address pool);\r\n\r\n  /// @notice Emitted when the default community fee is changed\r\n  /// @param newDefaultCommunityFee The new default community fee value\r\n  event DefaultCommunityFee(uint16 newDefaultCommunityFee);\r\n\r\n  /// @notice Emitted when the default tickspacing is changed\r\n  /// @param newDefaultTickspacing The new default tickspacing value\r\n  event DefaultTickspacing(int24 newDefaultTickspacing);\r\n\r\n  /// @notice Emitted when the default fee is changed\r\n  /// @param newDefaultFee The new default fee value\r\n  event DefaultFee(uint16 newDefaultFee);\r\n\r\n  /// @notice Emitted when the defaultPluginFactory address is changed\r\n  /// @param defaultPluginFactoryAddress The new defaultPluginFactory address\r\n  event DefaultPluginFactory(address defaultPluginFactoryAddress);\r\n\r\n  /// @notice Emitted when the vaultFactory address is changed\r\n  /// @param newVaultFactory The new vaultFactory address\r\n  event VaultFactory(address newVaultFactory);\r\n\r\n  /// @notice role that can change communityFee and tickspacing in pools\r\n  /// @return The hash corresponding to this role\r\n  function POOLS_ADMINISTRATOR_ROLE() external view returns (bytes32);\r\n\r\n  /// @notice Returns `true` if `account` has been granted `role` or `account` is owner.\r\n  /// @param role The hash corresponding to the role\r\n  /// @param account The address for which the role is checked\r\n  /// @return bool Whether the address has this role or the owner role or not\r\n  function hasRoleOrOwner(bytes32 role, address account) external view returns (bool);\r\n\r\n  /// @notice Returns the current owner of the factory\r\n  /// @dev Can be changed by the current owner via transferOwnership(address newOwner)\r\n  /// @return The address of the factory owner\r\n  function owner() external view returns (address);\r\n\r\n  /// @notice Returns the current poolDeployerAddress\r\n  /// @return The address of the poolDeployer\r\n  function poolDeployer() external view returns (address);\r\n\r\n  /// @notice Returns the default community fee\r\n  /// @return Fee which will be set at the creation of the pool\r\n  function defaultCommunityFee() external view returns (uint16);\r\n\r\n  /// @notice Returns the default fee\r\n  /// @return Fee which will be set at the creation of the pool\r\n  function defaultFee() external view returns (uint16);\r\n\r\n  /// @notice Returns the default tickspacing\r\n  /// @return Tickspacing which will be set at the creation of the pool\r\n  function defaultTickspacing() external view returns (int24);\r\n\r\n  /// @notice Return the current pluginFactory address\r\n  /// @dev This contract is used to automatically set a plugin address in new liquidity pools\r\n  /// @return Algebra plugin factory\r\n  function defaultPluginFactory() external view returns (IAlgebraPluginFactory);\r\n\r\n  /// @notice Return the current vaultFactory address\r\n  /// @dev This contract is used to automatically set a vault address in new liquidity pools\r\n  /// @return Algebra vault factory\r\n  function vaultFactory() external view returns (IAlgebraVaultFactory);\r\n\r\n  /// @notice Returns the default communityFee, tickspacing, fee and communityFeeVault for pool\r\n  /// @param pool the address of liquidity pool\r\n  /// @return communityFee which will be set at the creation of the pool\r\n  /// @return tickSpacing which will be set at the creation of the pool\r\n  /// @return fee which will be set at the creation of the pool\r\n  /// @return communityFeeVault the address of communityFeeVault\r\n  function defaultConfigurationForPool(\r\n    address pool\r\n  ) external view returns (uint16 communityFee, int24 tickSpacing, uint16 fee, address communityFeeVault);\r\n\r\n  /// @notice Deterministically computes the pool address given the token0 and token1\r\n  /// @dev The method does not check if such a pool has been created\r\n  /// @param token0 first token\r\n  /// @param token1 second token\r\n  /// @return pool The contract address of the Algebra pool\r\n  function computePoolAddress(address token0, address token1) external view returns (address pool);\r\n\r\n  /// @notice Returns the pool address for a given pair of tokens, or address 0 if it does not exist\r\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\r\n  /// @param tokenA The contract address of either token0 or token1\r\n  /// @param tokenB The contract address of the other token\r\n  /// @return pool The pool address\r\n  function poolByPair(address tokenA, address tokenB) external view returns (address pool);\r\n\r\n  /// @notice returns keccak256 of AlgebraPool init bytecode.\r\n  /// @dev the hash value changes with any change in the pool bytecode\r\n  /// @return Keccak256 hash of AlgebraPool contract init bytecode\r\n  function POOL_INIT_CODE_HASH() external view returns (bytes32);\r\n\r\n  /// @return timestamp The timestamp of the beginning of the renounceOwnership process\r\n  function renounceOwnershipStartTimestamp() external view returns (uint256 timestamp);\r\n\r\n  /// @notice Creates a pool for the given two tokens\r\n  /// @param tokenA One of the two tokens in the desired pool\r\n  /// @param tokenB The other of the two tokens in the desired pool\r\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0.\r\n  /// The call will revert if the pool already exists or the token arguments are invalid.\r\n  /// @return pool The address of the newly created pool\r\n  function createPool(address tokenA, address tokenB) external returns (address pool);\r\n\r\n  /// @dev updates default community fee for new pools\r\n  /// @param newDefaultCommunityFee The new community fee, _must_ be <= MAX_COMMUNITY_FEE\r\n  function setDefaultCommunityFee(uint16 newDefaultCommunityFee) external;\r\n\r\n  /// @dev updates default fee for new pools\r\n  /// @param newDefaultFee The new  fee, _must_ be <= MAX_DEFAULT_FEE\r\n  function setDefaultFee(uint16 newDefaultFee) external;\r\n\r\n  /// @dev updates default tickspacing for new pools\r\n  /// @param newDefaultTickspacing The new tickspacing, _must_ be <= MAX_TICK_SPACING and >= MIN_TICK_SPACING\r\n  function setDefaultTickspacing(int24 newDefaultTickspacing) external;\r\n\r\n  /// @dev updates pluginFactory address\r\n  /// @param newDefaultPluginFactory address of new plugin factory\r\n  function setDefaultPluginFactory(address newDefaultPluginFactory) external;\r\n\r\n  /// @dev updates vaultFactory address\r\n  /// @param newVaultFactory address of new vault factory\r\n  function setVaultFactory(address newVaultFactory) external;\r\n\r\n  /// @notice Starts process of renounceOwnership. After that, a certain period\r\n  /// of time must pass before the ownership renounce can be completed.\r\n  function startRenounceOwnership() external;\r\n\r\n  /// @notice Stops process of renounceOwnership and removes timer.\r\n  function stopRenounceOwnership() external;\r\n}\r\n"
    },
    "@cryptoalgebra/integral-core/contracts/interfaces/IAlgebraPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.4;\r\n\r\nimport './pool/IAlgebraPoolImmutables.sol';\r\nimport './pool/IAlgebraPoolState.sol';\r\nimport './pool/IAlgebraPoolActions.sol';\r\nimport './pool/IAlgebraPoolPermissionedActions.sol';\r\nimport './pool/IAlgebraPoolEvents.sol';\r\nimport './pool/IAlgebraPoolErrors.sol';\r\n\r\n/// @title The interface for a Algebra Pool\r\n/// @dev The pool interface is broken up into many smaller pieces.\r\n/// This interface includes custom error definitions and cannot be used in older versions of Solidity.\r\n/// For older versions of Solidity use #IAlgebraPoolLegacy\r\n/// Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPool is\r\n  IAlgebraPoolImmutables,\r\n  IAlgebraPoolState,\r\n  IAlgebraPoolActions,\r\n  IAlgebraPoolPermissionedActions,\r\n  IAlgebraPoolEvents,\r\n  IAlgebraPoolErrors\r\n{\r\n  // used only for combining interfaces\r\n}\r\n"
    },
    "@cryptoalgebra/integral-core/contracts/interfaces/plugin/IAlgebraPluginFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title An interface for a contract that is capable of deploying Algebra plugins\r\n/// @dev Such a factory is needed if the plugin should be automatically created and connected to each new pool\r\ninterface IAlgebraPluginFactory {\r\n  /// @notice Deploys new plugin contract for pool\r\n  /// @param pool The address of the pool for which the new plugin will be created\r\n  /// @param token0 First token of the pool\r\n  /// @param token1 Second token of the pool\r\n  /// @return New plugin address\r\n  function createPlugin(address pool, address token0, address token1) external returns (address);\r\n}\r\n"
    },
    "@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Permissionless pool actions\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolActions {\r\n  /// @notice Sets the initial price for the pool\r\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\r\n  /// @dev Initialization should be done in one transaction with pool creation to avoid front-running\r\n  /// @param initialPrice The initial sqrt price of the pool as a Q64.96\r\n  function initialize(uint160 initialPrice) external;\r\n\r\n  /// @notice Adds liquidity for the given recipient/bottomTick/topTick position\r\n  /// @dev The caller of this method receives a callback in the form of IAlgebraMintCallback#algebraMintCallback\r\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\r\n  /// on bottomTick, topTick, the amount of liquidity, and the current price.\r\n  /// @param leftoversRecipient The address which will receive potential surplus of paid tokens\r\n  /// @param recipient The address for which the liquidity will be created\r\n  /// @param bottomTick The lower tick of the position in which to add liquidity\r\n  /// @param topTick The upper tick of the position in which to add liquidity\r\n  /// @param liquidityDesired The desired amount of liquidity to mint\r\n  /// @param data Any data that should be passed through to the callback\r\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n  /// @return liquidityActual The actual minted amount of liquidity\r\n  function mint(\r\n    address leftoversRecipient,\r\n    address recipient,\r\n    int24 bottomTick,\r\n    int24 topTick,\r\n    uint128 liquidityDesired,\r\n    bytes calldata data\r\n  ) external returns (uint256 amount0, uint256 amount1, uint128 liquidityActual);\r\n\r\n  /// @notice Collects tokens owed to a position\r\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\r\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\r\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\r\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\r\n  /// @param recipient The address which should receive the fees collected\r\n  /// @param bottomTick The lower tick of the position for which to collect fees\r\n  /// @param topTick The upper tick of the position for which to collect fees\r\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\r\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\r\n  /// @return amount0 The amount of fees collected in token0\r\n  /// @return amount1 The amount of fees collected in token1\r\n  function collect(\r\n    address recipient,\r\n    int24 bottomTick,\r\n    int24 topTick,\r\n    uint128 amount0Requested,\r\n    uint128 amount1Requested\r\n  ) external returns (uint128 amount0, uint128 amount1);\r\n\r\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\r\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\r\n  /// @dev Fees must be collected separately via a call to #collect\r\n  /// @param bottomTick The lower tick of the position for which to burn liquidity\r\n  /// @param topTick The upper tick of the position for which to burn liquidity\r\n  /// @param amount How much liquidity to burn\r\n  /// @param data Any data that should be passed through to the plugin\r\n  /// @return amount0 The amount of token0 sent to the recipient\r\n  /// @return amount1 The amount of token1 sent to the recipient\r\n  function burn(int24 bottomTick, int24 topTick, uint128 amount, bytes calldata data) external returns (uint256 amount0, uint256 amount1);\r\n\r\n  /// @notice Swap token0 for token1, or token1 for token0\r\n  /// @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback#algebraSwapCallback\r\n  /// @param recipient The address to receive the output of the swap\r\n  /// @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\r\n  /// @param amountRequired The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\r\n  /// @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\r\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\r\n  /// @param data Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData\r\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\r\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\r\n  function swap(\r\n    address recipient,\r\n    bool zeroToOne,\r\n    int256 amountRequired,\r\n    uint160 limitSqrtPrice,\r\n    bytes calldata data\r\n  ) external returns (int256 amount0, int256 amount1);\r\n\r\n  /// @notice Swap token0 for token1, or token1 for token0 with prepayment\r\n  /// @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback#algebraSwapCallback\r\n  /// caller must send tokens in callback before swap calculation\r\n  /// the actually sent amount of tokens is used for further calculations\r\n  /// @param leftoversRecipient The address which will receive potential surplus of paid tokens\r\n  /// @param recipient The address to receive the output of the swap\r\n  /// @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\r\n  /// @param amountToSell The amount of the swap, only positive (exact input) amount allowed\r\n  /// @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\r\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\r\n  /// @param data Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData\r\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\r\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\r\n  function swapWithPaymentInAdvance(\r\n    address leftoversRecipient,\r\n    address recipient,\r\n    bool zeroToOne,\r\n    int256 amountToSell,\r\n    uint160 limitSqrtPrice,\r\n    bytes calldata data\r\n  ) external returns (int256 amount0, int256 amount1);\r\n\r\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\r\n  /// @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback#algebraFlashCallback\r\n  /// @dev All excess tokens paid in the callback are distributed to currently in-range liquidity providers as an additional fee.\r\n  /// If there are no in-range liquidity providers, the fee will be transferred to the first active provider in the future\r\n  /// @param recipient The address which will receive the token0 and token1 amounts\r\n  /// @param amount0 The amount of token0 to send\r\n  /// @param amount1 The amount of token1 to send\r\n  /// @param data Any data to be passed through to the callback\r\n  function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\r\n}\r\n"
    },
    "@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolErrors.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.4;\r\n\r\n/// @title Errors emitted by a pool\r\n/// @notice Contains custom errors emitted by the pool\r\n/// @dev Custom errors are separated from the common pool interface for compatibility with older versions of Solidity\r\ninterface IAlgebraPoolErrors {\r\n  // ####  pool errors  ####\r\n\r\n  /// @notice Emitted by the reentrancy guard\r\n  error locked();\r\n\r\n  /// @notice Emitted if arithmetic error occurred\r\n  error arithmeticError();\r\n\r\n  /// @notice Emitted if an attempt is made to initialize the pool twice\r\n  error alreadyInitialized();\r\n\r\n  /// @notice Emitted if an attempt is made to mint or swap in uninitialized pool\r\n  error notInitialized();\r\n\r\n  /// @notice Emitted if 0 is passed as amountRequired to swap function\r\n  error zeroAmountRequired();\r\n\r\n  /// @notice Emitted if invalid amount is passed as amountRequired to swap function\r\n  error invalidAmountRequired();\r\n\r\n  /// @notice Emitted if the pool received fewer tokens than it should have\r\n  error insufficientInputAmount();\r\n\r\n  /// @notice Emitted if there was an attempt to mint zero liquidity\r\n  error zeroLiquidityDesired();\r\n  /// @notice Emitted if actual amount of liquidity is zero (due to insufficient amount of tokens received)\r\n  error zeroLiquidityActual();\r\n\r\n  /// @notice Emitted if the pool received fewer tokens0 after flash than it should have\r\n  error flashInsufficientPaid0();\r\n  /// @notice Emitted if the pool received fewer tokens1 after flash than it should have\r\n  error flashInsufficientPaid1();\r\n\r\n  /// @notice Emitted if limitSqrtPrice param is incorrect\r\n  error invalidLimitSqrtPrice();\r\n\r\n  /// @notice Tick must be divisible by tickspacing\r\n  error tickIsNotSpaced();\r\n\r\n  /// @notice Emitted if a method is called that is accessible only to the factory owner or dedicated role\r\n  error notAllowed();\r\n\r\n  /// @notice Emitted if new tick spacing exceeds max allowed value\r\n  error invalidNewTickSpacing();\r\n  /// @notice Emitted if new community fee exceeds max allowed value\r\n  error invalidNewCommunityFee();\r\n\r\n  /// @notice Emitted if an attempt is made to manually change the fee value, but dynamic fee is enabled\r\n  error dynamicFeeActive();\r\n  /// @notice Emitted if an attempt is made by plugin to change the fee value, but dynamic fee is disabled\r\n  error dynamicFeeDisabled();\r\n  /// @notice Emitted if an attempt is made to change the plugin configuration, but the plugin is not connected\r\n  error pluginIsNotConnected();\r\n  /// @notice Emitted if a plugin returns invalid selector after hook call\r\n  /// @param expectedSelector The expected selector\r\n  error invalidHookResponse(bytes4 expectedSelector);\r\n\r\n  // ####  LiquidityMath errors  ####\r\n\r\n  /// @notice Emitted if liquidity underflows\r\n  error liquiditySub();\r\n  /// @notice Emitted if liquidity overflows\r\n  error liquidityAdd();\r\n\r\n  // ####  TickManagement errors  ####\r\n\r\n  /// @notice Emitted if the topTick param not greater then the bottomTick param\r\n  error topTickLowerOrEqBottomTick();\r\n  /// @notice Emitted if the bottomTick param is lower than min allowed value\r\n  error bottomTickLowerThanMIN();\r\n  /// @notice Emitted if the topTick param is greater than max allowed value\r\n  error topTickAboveMAX();\r\n  /// @notice Emitted if the liquidity value associated with the tick exceeds MAX_LIQUIDITY_PER_TICK\r\n  error liquidityOverflow();\r\n  /// @notice Emitted if an attempt is made to interact with an uninitialized tick\r\n  error tickIsNotInitialized();\r\n  /// @notice Emitted if there is an attempt to insert a new tick into the list of ticks with incorrect indexes of the previous and next ticks\r\n  error tickInvalidLinks();\r\n\r\n  // ####  SafeTransfer errors  ####\r\n\r\n  /// @notice Emitted if token transfer failed internally\r\n  error transferFailed();\r\n\r\n  // ####  TickMath errors  ####\r\n\r\n  /// @notice Emitted if tick is greater than the maximum or less than the minimum allowed value\r\n  error tickOutOfRange();\r\n  /// @notice Emitted if price is greater than the maximum or less than the minimum allowed value\r\n  error priceOutOfRange();\r\n}\r\n"
    },
    "@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Events emitted by a pool\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolEvents {\r\n  /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\r\n  /// @dev Mint/Burn/Swaps cannot be emitted by the pool before Initialize\r\n  /// @param price The initial sqrt price of the pool, as a Q64.96\r\n  /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\r\n  event Initialize(uint160 price, int24 tick);\r\n\r\n  /// @notice Emitted when liquidity is minted for a given position\r\n  /// @param sender The address that minted the liquidity\r\n  /// @param owner The owner of the position and recipient of any minted liquidity\r\n  /// @param bottomTick The lower tick of the position\r\n  /// @param topTick The upper tick of the position\r\n  /// @param liquidityAmount The amount of liquidity minted to the position range\r\n  /// @param amount0 How much token0 was required for the minted liquidity\r\n  /// @param amount1 How much token1 was required for the minted liquidity\r\n  event Mint(\r\n    address sender,\r\n    address indexed owner,\r\n    int24 indexed bottomTick,\r\n    int24 indexed topTick,\r\n    uint128 liquidityAmount,\r\n    uint256 amount0,\r\n    uint256 amount1\r\n  );\r\n\r\n  /// @notice Emitted when fees are collected by the owner of a position\r\n  /// @param owner The owner of the position for which fees are collected\r\n  /// @param recipient The address that received fees\r\n  /// @param bottomTick The lower tick of the position\r\n  /// @param topTick The upper tick of the position\r\n  /// @param amount0 The amount of token0 fees collected\r\n  /// @param amount1 The amount of token1 fees collected\r\n  event Collect(address indexed owner, address recipient, int24 indexed bottomTick, int24 indexed topTick, uint128 amount0, uint128 amount1);\r\n\r\n  /// @notice Emitted when a position's liquidity is removed\r\n  /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\r\n  /// @param owner The owner of the position for which liquidity is removed\r\n  /// @param bottomTick The lower tick of the position\r\n  /// @param topTick The upper tick of the position\r\n  /// @param liquidityAmount The amount of liquidity to remove\r\n  /// @param amount0 The amount of token0 withdrawn\r\n  /// @param amount1 The amount of token1 withdrawn\r\n  event Burn(address indexed owner, int24 indexed bottomTick, int24 indexed topTick, uint128 liquidityAmount, uint256 amount0, uint256 amount1);\r\n\r\n  /// @notice Emitted by the pool for any swaps between token0 and token1\r\n  /// @param sender The address that initiated the swap call, and that received the callback\r\n  /// @param recipient The address that received the output of the swap\r\n  /// @param amount0 The delta of the token0 balance of the pool\r\n  /// @param amount1 The delta of the token1 balance of the pool\r\n  /// @param price The sqrt(price) of the pool after the swap, as a Q64.96\r\n  /// @param liquidity The liquidity of the pool after the swap\r\n  /// @param tick The log base 1.0001 of price of the pool after the swap\r\n  event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 price, uint128 liquidity, int24 tick);\r\n\r\n  /// @notice Emitted by the pool for any flashes of token0/token1\r\n  /// @param sender The address that initiated the swap call, and that received the callback\r\n  /// @param recipient The address that received the tokens from flash\r\n  /// @param amount0 The amount of token0 that was flashed\r\n  /// @param amount1 The amount of token1 that was flashed\r\n  /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\r\n  /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\r\n  event Flash(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\r\n\r\n  /// @notice Emitted when the community fee is changed by the pool\r\n  /// @param communityFeeNew The updated value of the community fee in thousandths (1e-3)\r\n  event CommunityFee(uint16 communityFeeNew);\r\n\r\n  /// @notice Emitted when the tick spacing changes\r\n  /// @param newTickSpacing The updated value of the new tick spacing\r\n  event TickSpacing(int24 newTickSpacing);\r\n\r\n  /// @notice Emitted when the plugin address changes\r\n  /// @param newPluginAddress New plugin address\r\n  event Plugin(address newPluginAddress);\r\n\r\n  /// @notice Emitted when the plugin config changes\r\n  /// @param newPluginConfig New plugin config\r\n  event PluginConfig(uint8 newPluginConfig);\r\n\r\n  /// @notice Emitted when the fee changes inside the pool\r\n  /// @param fee The current fee in hundredths of a bip, i.e. 1e-6\r\n  event Fee(uint16 fee);\r\n\r\n  event CommunityVault(address newCommunityVault);\r\n}\r\n"
    },
    "@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that never changes\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolImmutables {\r\n  /// @notice The Algebra factory contract, which must adhere to the IAlgebraFactory interface\r\n  /// @return The contract address\r\n  function factory() external view returns (address);\r\n\r\n  /// @notice The first of the two tokens of the pool, sorted by address\r\n  /// @return The token contract address\r\n  function token0() external view returns (address);\r\n\r\n  /// @notice The second of the two tokens of the pool, sorted by address\r\n  /// @return The token contract address\r\n  function token1() external view returns (address);\r\n\r\n  /// @notice The maximum amount of position liquidity that can use any tick in the range\r\n  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\r\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\r\n  /// @return The max amount of liquidity per tick\r\n  function maxLiquidityPerTick() external view returns (uint128);\r\n}\r\n"
    },
    "@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolPermissionedActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Permissioned pool actions\r\n/// @notice Contains pool methods that may only be called by permissioned addresses\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolPermissionedActions {\r\n  /// @notice Set the community's % share of the fees. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\r\n  /// @param newCommunityFee The new community fee percent in thousandths (1e-3)\r\n  function setCommunityFee(uint16 newCommunityFee) external;\r\n\r\n  /// @notice Set the new tick spacing values. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\r\n  /// @param newTickSpacing The new tick spacing value\r\n  function setTickSpacing(int24 newTickSpacing) external;\r\n\r\n  /// @notice Set the new plugin address. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\r\n  /// @param newPluginAddress The new plugin address\r\n  function setPlugin(address newPluginAddress) external;\r\n\r\n  /// @notice Set new plugin config. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\r\n  /// @param newConfig In the new configuration of the plugin,\r\n  /// each bit of which is responsible for a particular hook.\r\n  function setPluginConfig(uint8 newConfig) external;\r\n\r\n  /// @notice Set new community fee vault address. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\r\n  /// @dev Community fee vault receives collected community fees.\r\n  /// **accumulated but not yet sent to the vault community fees once will be sent to the `newCommunityVault` address**\r\n  /// @param newCommunityVault The address of new community fee vault\r\n  function setCommunityVault(address newCommunityVault) external;\r\n\r\n  /// @notice Set new pool fee. Can be called by owner if dynamic fee is disabled.\r\n  /// Called by the plugin if dynamic fee is enabled\r\n  /// @param newFee The new fee value\r\n  function setFee(uint16 newFee) external;\r\n}\r\n"
    },
    "@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that can change\r\n/// @dev Important security note: when using this data by external contracts, it is necessary to take into account the possibility\r\n/// of manipulation (including read-only reentrancy).\r\n/// This interface is based on the UniswapV3 interface, credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolState {\r\n  /// @notice Safely get most important state values of Algebra Integral AMM\r\n  /// @dev Several values exposed as a single method to save gas when accessed externally.\r\n  /// **Important security note: this method checks reentrancy lock and should be preferred in most cases**.\r\n  /// @return sqrtPrice The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value\r\n  /// @return tick The current global tick of the pool. May not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary\r\n  /// @return lastFee The current (last known) pool fee value in hundredths of a bip, i.e. 1e-6 (so '100' is '0.01%'). May be obsolete if using dynamic fee plugin\r\n  /// @return pluginConfig The current plugin config as bitmap. Each bit is responsible for enabling/disabling the hooks, the last bit turns on/off dynamic fees logic\r\n  /// @return activeLiquidity  The currently in-range liquidity available to the pool\r\n  /// @return nextTick The next initialized tick after current global tick\r\n  /// @return previousTick The previous initialized tick before (or at) current global tick\r\n  function safelyGetStateOfAMM()\r\n    external\r\n    view\r\n    returns (uint160 sqrtPrice, int24 tick, uint16 lastFee, uint8 pluginConfig, uint128 activeLiquidity, int24 nextTick, int24 previousTick);\r\n\r\n  /// @notice Allows to easily get current reentrancy lock status\r\n  /// @dev can be used to prevent read-only reentrancy.\r\n  /// This method just returns `globalState.unlocked` value\r\n  /// @return unlocked Reentrancy lock flag, true if the pool currently is unlocked, otherwise - false\r\n  function isUnlocked() external view returns (bool unlocked);\r\n\r\n  // ! IMPORTANT security note: the pool state can be manipulated.\r\n  // ! The following methods do not check reentrancy lock themselves.\r\n\r\n  /// @notice The globalState structure in the pool stores many values but requires only one slot\r\n  /// and is exposed as a single method to save gas when accessed externally.\r\n  /// @dev **important security note: caller should check `unlocked` flag to prevent read-only reentrancy**\r\n  /// @return price The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value\r\n  /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run\r\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary\r\n  /// @return lastFee The current (last known) pool fee value in hundredths of a bip, i.e. 1e-6 (so '100' is '0.01%'). May be obsolete if using dynamic fee plugin\r\n  /// @return pluginConfig The current plugin config as bitmap. Each bit is responsible for enabling/disabling the hooks, the last bit turns on/off dynamic fees logic\r\n  /// @return communityFee The community fee represented as a percent of all collected fee in thousandths, i.e. 1e-3 (so 100 is 10%)\r\n  /// @return unlocked Reentrancy lock flag, true if the pool currently is unlocked, otherwise - false\r\n  function globalState() external view returns (uint160 price, int24 tick, uint16 lastFee, uint8 pluginConfig, uint16 communityFee, bool unlocked);\r\n\r\n  /// @notice Look up information about a specific tick in the pool\r\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\r\n  /// @param tick The tick to look up\r\n  /// @return liquidityTotal The total amount of position liquidity that uses the pool either as tick lower or tick upper\r\n  /// @return liquidityDelta How much liquidity changes when the pool price crosses the tick\r\n  /// @return prevTick The previous tick in tick list\r\n  /// @return nextTick The next tick in tick list\r\n  /// @return outerFeeGrowth0Token The fee growth on the other side of the tick from the current tick in token0\r\n  /// @return outerFeeGrowth1Token The fee growth on the other side of the tick from the current tick in token1\r\n  /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\r\n  /// a specific position.\r\n  function ticks(\r\n    int24 tick\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 liquidityTotal,\r\n      int128 liquidityDelta,\r\n      int24 prevTick,\r\n      int24 nextTick,\r\n      uint256 outerFeeGrowth0Token,\r\n      uint256 outerFeeGrowth1Token\r\n    );\r\n\r\n  /// @notice The timestamp of the last sending of tokens to community vault\r\n  /// @return The timestamp truncated to 32 bits\r\n  function communityFeeLastTimestamp() external view returns (uint32);\r\n\r\n  /// @notice The amounts of token0 and token1 that will be sent to the vault\r\n  /// @dev Will be sent COMMUNITY_FEE_TRANSFER_FREQUENCY after communityFeeLastTimestamp\r\n  /// @return communityFeePending0 The amount of token0 that will be sent to the vault\r\n  /// @return communityFeePending1 The amount of token1 that will be sent to the vault\r\n  function getCommunityFeePending() external view returns (uint128 communityFeePending0, uint128 communityFeePending1);\r\n\r\n  /// @notice Returns the address of currently used plugin\r\n  /// @dev The plugin is subject to change\r\n  /// @return pluginAddress The address of currently used plugin\r\n  function plugin() external view returns (address pluginAddress);\r\n\r\n  /// @notice The contract to which community fees are transferred\r\n  /// @return communityVaultAddress The communityVault address\r\n  function communityVault() external view returns (address communityVaultAddress);\r\n\r\n  /// @notice Returns 256 packed tick initialized boolean values. See TickTree for more information\r\n  /// @param wordPosition Index of 256-bits word with ticks\r\n  /// @return The 256-bits word with packed ticks info\r\n  function tickTable(int16 wordPosition) external view returns (uint256);\r\n\r\n  /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\r\n  /// @dev This value can overflow the uint256\r\n  /// @return The fee growth accumulator for token0\r\n  function totalFeeGrowth0Token() external view returns (uint256);\r\n\r\n  /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\r\n  /// @dev This value can overflow the uint256\r\n  /// @return The fee growth accumulator for token1\r\n  function totalFeeGrowth1Token() external view returns (uint256);\r\n\r\n  /// @notice The current pool fee value\r\n  /// @dev In case dynamic fee is enabled in the pool, this method will call the plugin to get the current fee.\r\n  /// If the plugin implements complex fee logic, this method may return an incorrect value or revert.\r\n  /// In this case, see the plugin implementation and related documentation.\r\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\r\n  /// @return currentFee The current pool fee value in hundredths of a bip, i.e. 1e-6\r\n  function fee() external view returns (uint16 currentFee);\r\n\r\n  /// @notice The tracked token0 and token1 reserves of pool\r\n  /// @dev If at any time the real balance is larger, the excess will be transferred to liquidity providers as additional fee.\r\n  /// If the balance exceeds uint128, the excess will be sent to the communityVault.\r\n  /// @return reserve0 The last known reserve of token0\r\n  /// @return reserve1 The last known reserve of token1\r\n  function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\r\n\r\n  /// @notice Returns the information about a position by the position's key\r\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\r\n  /// @param key The position's key is a packed concatenation of the owner address, bottomTick and topTick indexes\r\n  /// @return liquidity The amount of liquidity in the position\r\n  /// @return innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke\r\n  /// @return innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke\r\n  /// @return fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke\r\n  /// @return fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\r\n  function positions(\r\n    bytes32 key\r\n  ) external view returns (uint256 liquidity, uint256 innerFeeGrowth0Token, uint256 innerFeeGrowth1Token, uint128 fees0, uint128 fees1);\r\n\r\n  /// @notice The currently in range liquidity available to the pool\r\n  /// @dev This value has no relationship to the total liquidity across all ticks.\r\n  /// Returned value cannot exceed type(uint128).max\r\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\r\n  /// @return The current in range liquidity\r\n  function liquidity() external view returns (uint128);\r\n\r\n  /// @notice The current tick spacing\r\n  /// @dev Ticks can only be initialized by new mints at multiples of this value\r\n  /// e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...\r\n  /// However, tickspacing can be changed after the ticks have been initialized.\r\n  /// This value is an int24 to avoid casting even though it is always positive.\r\n  /// @return The current tick spacing\r\n  function tickSpacing() external view returns (int24);\r\n\r\n  /// @notice The previous initialized tick before (or at) current global tick\r\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\r\n  /// @return The previous initialized tick\r\n  function prevTickGlobal() external view returns (int24);\r\n\r\n  /// @notice The next initialized tick after current global tick\r\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\r\n  /// @return The next initialized tick\r\n  function nextTickGlobal() external view returns (int24);\r\n\r\n  /// @notice The root of tick search tree\r\n  /// @dev Each bit corresponds to one node in the second layer of tick tree: '1' if node has at least one active bit.\r\n  /// **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\r\n  /// @return The root of tick search tree as bitmap\r\n  function tickTreeRoot() external view returns (uint32);\r\n\r\n  /// @notice The second layer of tick search tree\r\n  /// @dev Each bit in node corresponds to one node in the leafs layer (`tickTable`) of tick tree: '1' if leaf has at least one active bit.\r\n  /// **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\r\n  /// @return The node of tick search tree second layer\r\n  function tickTreeSecondLayer(int16) external view returns (uint256);\r\n}\r\n"
    },
    "@cryptoalgebra/integral-core/contracts/interfaces/vault/IAlgebraVaultFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title The interface for the Algebra Vault Factory\r\n/// @notice This contract can be used for automatic vaults creation\r\n/// @dev Version: Algebra Integral\r\ninterface IAlgebraVaultFactory {\r\n  /// @notice returns address of the community fee vault for the pool\r\n  /// @param pool the address of Algebra Integral pool\r\n  /// @return communityFeeVault the address of community fee vault\r\n  function getVaultForPool(address pool) external view returns (address communityFeeVault);\r\n\r\n  /// @notice creates the community fee vault for the pool if needed\r\n  /// @param pool the address of Algebra Integral pool\r\n  /// @return communityFeeVault the address of community fee vault\r\n  function createVaultForPool(address pool) external returns (address communityFeeVault);\r\n}\r\n"
    },
    "@cryptoalgebra/integral-core/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.4 <0.9.0;\r\n\r\nimport '../interfaces/pool/IAlgebraPoolErrors.sol';\r\n\r\n/// @title Math library for computing sqrt prices from ticks and vice versa\r\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\r\n/// prices between 2**-128 and 2**128\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\r\nlibrary TickMath {\r\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n  int24 internal constant MIN_TICK = -887272;\r\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n  int24 internal constant MAX_TICK = -MIN_TICK;\r\n\r\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\r\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\r\n\r\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n  /// @dev Throws if |tick| > max tick\r\n  /// @param tick The input tick for the above formula\r\n  /// @return price A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n  /// at the given tick\r\n  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 price) {\r\n    unchecked {\r\n      // get abs value\r\n      int24 absTickMask = tick >> (24 - 1);\r\n      uint256 absTick = uint24((tick + absTickMask) ^ absTickMask);\r\n      if (absTick > uint24(MAX_TICK)) revert IAlgebraPoolErrors.tickOutOfRange();\r\n\r\n      uint256 ratio = 0x100000000000000000000000000000000;\r\n      if (absTick & 0x1 != 0) ratio = 0xfffcb933bd6fad37aa2d162d1a594001;\r\n      if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n      if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n      if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n      if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n      if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n      if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n      if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n      if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n      if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n      if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n      if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n      if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n      if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n      if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n      if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n      if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n      if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n      if (absTick >= 0x40000) {\r\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n      }\r\n\r\n      if (tick > 0) {\r\n        assembly {\r\n          ratio := div(not(0), ratio)\r\n        }\r\n      }\r\n\r\n      // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n      // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n      // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n      price = uint160((ratio + 0xFFFFFFFF) >> 32);\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\r\n  /// @dev Throws in case price < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\r\n  /// ever return.\r\n  /// @param price The sqrt ratio for which to compute the tick as a Q64.96\r\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\r\n  function getTickAtSqrtRatio(uint160 price) internal pure returns (int24 tick) {\r\n    unchecked {\r\n      // second inequality must be >= because the price can never reach the price at the max tick\r\n      if (price < MIN_SQRT_RATIO || price >= MAX_SQRT_RATIO) revert IAlgebraPoolErrors.priceOutOfRange();\r\n      uint256 ratio = uint256(price) << 32;\r\n\r\n      uint256 r = ratio;\r\n      uint256 msb;\r\n\r\n      assembly {\r\n        let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n        msb := or(msb, f)\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n        msb := or(msb, f)\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        let f := shl(5, gt(r, 0xFFFFFFFF))\r\n        msb := or(msb, f)\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        let f := shl(4, gt(r, 0xFFFF))\r\n        msb := or(msb, f)\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        let f := shl(3, gt(r, 0xFF))\r\n        msb := or(msb, f)\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        let f := shl(2, gt(r, 0xF))\r\n        msb := or(msb, f)\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        let f := shl(1, gt(r, 0x3))\r\n        msb := or(msb, f)\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        let f := gt(r, 0x1)\r\n        msb := or(msb, f)\r\n      }\r\n\r\n      if (msb >= 128) r = ratio >> (msb - 127);\r\n      else r = ratio << (127 - msb);\r\n\r\n      int256 log_2 = (int256(msb) - 128) << 64;\r\n\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(63, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(62, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(61, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(60, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(59, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(58, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(57, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(56, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(55, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(54, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(53, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(52, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(51, f))\r\n        r := shr(f, r)\r\n      }\r\n      assembly {\r\n        r := shr(127, mul(r, r))\r\n        let f := shr(128, r)\r\n        log_2 := or(log_2, shl(50, f))\r\n      }\r\n\r\n      int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\r\n\r\n      int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\r\n      int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\r\n\r\n      tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= price ? tickHi : tickLow;\r\n    }\r\n  }\r\n}\r\n"
    },
    "@cryptoalgebra/integral-periphery/contracts/interfaces/external/IWNativeToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^0.8.0;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\n/// @title Interface for WNativeToken\r\ninterface IWNativeToken is IERC20 {\r\n    /// @notice Deposit ether to get wrapped ether\r\n    function deposit() external payable;\r\n\r\n    /// @notice Withdraw wrapped ether to get ether\r\n    function withdraw(uint256) external;\r\n}\r\n"
    },
    "@cryptoalgebra/integral-periphery/contracts/interfaces/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain separator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
    },
    "@cryptoalgebra/integral-periphery/contracts/interfaces/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.5;\r\npragma abicoder v2;\r\n\r\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\r\n\r\nimport './IPoolInitializer.sol';\r\nimport './IERC721Permit.sol';\r\nimport './IPeripheryPayments.sol';\r\nimport './IPeripheryImmutableState.sol';\r\n\r\n/// @title Non-fungible token for positions\r\n/// @notice Wraps Algebra positions in a non-fungible token interface which allows for them to be transferred\r\n/// and authorized.\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-periphery\r\ninterface INonfungiblePositionManager is\r\n    IPoolInitializer,\r\n    IPeripheryPayments,\r\n    IPeripheryImmutableState,\r\n    IERC721Metadata,\r\n    IERC721Enumerable,\r\n    IERC721Permit\r\n{\r\n    /// @notice Emitted when liquidity is increased for a position NFT\r\n    /// @dev Also emitted when a token is minted\r\n    /// @param tokenId The ID of the token for which liquidity was increased\r\n    /// @param liquidityDesired The amount by which liquidity for the NFT position was increased\r\n    /// @param actualLiquidity the actual liquidity that was added into a pool. Could differ from\r\n    /// _liquidity_ when using FeeOnTransfer tokens\r\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\r\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\r\n    event IncreaseLiquidity(\r\n        uint256 indexed tokenId,\r\n        uint128 liquidityDesired,\r\n        uint128 actualLiquidity,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address pool\r\n    );\r\n\r\n    /// @notice Emitted when liquidity is decreased for a position NFT\r\n    /// @param tokenId The ID of the token for which liquidity was decreased\r\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\r\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\r\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\r\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Emitted when tokens are collected for a position NFT\r\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\r\n    /// @param tokenId The ID of the token for which underlying tokens were collected\r\n    /// @param recipient The address of the account that received the collected tokens\r\n    /// @param amount0 The amount of token0 owed to the position that was collected\r\n    /// @param amount1 The amount of token1 owed to the position that was collected\r\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Emitted if farming failed in call from NonfungiblePositionManager.\r\n    /// @dev Should never be emitted\r\n    /// @param tokenId The ID of corresponding token\r\n    event FarmingFailed(uint256 indexed tokenId);\r\n\r\n    /// @notice Emitted after farming center address change\r\n    /// @param farmingCenterAddress The new address of connected farming center\r\n    event FarmingCenter(address farmingCenterAddress);\r\n\r\n    /// @notice Returns the position information associated with a given token ID.\r\n    /// @dev Throws if the token ID is not valid.\r\n    /// @param tokenId The ID of the token that represents the position\r\n    /// @return nonce The nonce for permits\r\n    /// @return operator The address that is approved for spending\r\n    /// @return token0 The address of the token0 for a specific pool\r\n    /// @return token1 The address of the token1 for a specific pool\r\n    /// @return tickLower The lower end of the tick range for the position\r\n    /// @return tickUpper The higher end of the tick range for the position\r\n    /// @return liquidity The liquidity of the position\r\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\r\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\r\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\r\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\r\n    function positions(\r\n        uint256 tokenId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint88 nonce,\r\n            address operator,\r\n            address token0,\r\n            address token1,\r\n            int24 tickLower,\r\n            int24 tickUpper,\r\n            uint128 liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Creates a new position wrapped in a NFT\r\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\r\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\r\n    /// @dev If native token is used as input, this function should be accompanied by a `refundNativeToken` in multicall to avoid potential loss of native tokens\r\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\r\n    /// @return tokenId The ID of the token that represents the minted position\r\n    /// @return liquidity The liquidity delta amount as a result of the increase\r\n    /// @return amount0 The amount of token0\r\n    /// @return amount1 The amount of token1\r\n    function mint(\r\n        MintParams calldata params\r\n    ) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n\r\n    struct IncreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\r\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\r\n    /// amount0Desired The desired amount of token0 to be spent,\r\n    /// amount1Desired The desired amount of token1 to be spent,\r\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\r\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @dev If native token is used as input, this function should be accompanied by a `refundNativeToken` in multicall to avoid potential loss of native tokens\r\n    /// @return liquidity The liquidity delta amount as a result of the increase\r\n    /// @return amount0 The amount of token0 to achieve resulting liquidity\r\n    /// @return amount1 The amount of token1 to achieve resulting liquidity\r\n    function increaseLiquidity(\r\n        IncreaseLiquidityParams calldata params\r\n    ) external payable returns (uint128 liquidity, uint256 amount0, uint256 amount1);\r\n\r\n    struct DecreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint128 liquidity;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\r\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\r\n    /// amount The amount by which liquidity will be decreased,\r\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\r\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\r\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\r\n    function decreaseLiquidity(\r\n        DecreaseLiquidityParams calldata params\r\n    ) external payable returns (uint256 amount0, uint256 amount1);\r\n\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\r\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\r\n    /// recipient The account that should receive the tokens,\r\n    /// amount0Max The maximum amount of token0 to collect,\r\n    /// amount1Max The maximum amount of token1 to collect\r\n    /// @return amount0 The amount of fees collected in token0\r\n    /// @return amount1 The amount of fees collected in token1\r\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\r\n    /// must be collected first.\r\n    /// @param tokenId The ID of the token that is being burned\r\n    function burn(uint256 tokenId) external payable;\r\n\r\n    /// @notice Changes approval of token ID for farming.\r\n    /// @param tokenId The ID of the token that is being approved / unapproved\r\n    /// @param approve New status of approval\r\n    /// @param farmingAddress The address of farming: used to prevent tx frontrun\r\n    function approveForFarming(uint256 tokenId, bool approve, address farmingAddress) external payable;\r\n\r\n    /// @notice Changes farming status of token to 'farmed' or 'not farmed'\r\n    /// @dev can be called only by farmingCenter\r\n    /// @param tokenId The ID of the token\r\n    /// @param toActive The new status\r\n    function switchFarmingStatus(uint256 tokenId, bool toActive) external;\r\n\r\n    /// @notice Changes address of farmingCenter\r\n    /// @dev can be called only by factory owner or NONFUNGIBLE_POSITION_MANAGER_ADMINISTRATOR_ROLE\r\n    /// @param newFarmingCenter The new address of farmingCenter\r\n    function setFarmingCenter(address newFarmingCenter) external;\r\n\r\n    /// @notice Returns whether `spender` is allowed to manage `tokenId`\r\n    /// @dev Requirement: `tokenId` must exist\r\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\r\n\r\n    /// @notice Returns the address of currently connected farming, if any\r\n    /// @return The address of the farming center contract, which handles farmings logic\r\n    function farmingCenter() external view returns (address);\r\n\r\n    /// @notice Returns the address of farming that is approved for this token, if any\r\n    function farmingApprovals(uint256 tokenId) external view returns (address);\r\n\r\n    /// @notice Returns the address of farming in which this token is farmed, if any\r\n    function tokenFarmedIn(uint256 tokenId) external view returns (address);\r\n}\r\n"
    },
    "@cryptoalgebra/integral-periphery/contracts/interfaces/IPeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\n/// https://github.com/Uniswap/v3-periphery\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Algebra factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of the pool Deployer\n    function poolDeployer() external view returns (address);\n\n    /// @return Returns the address of WNativeToken\n    function WNativeToken() external view returns (address);\n}\n"
    },
    "@cryptoalgebra/integral-periphery/contracts/interfaces/IPeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of NativeToken\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\n/// https://github.com/Uniswap/v3-periphery\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WNativeToken balance and sends it to recipient as NativeToken.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WNativeToken from users.\n    /// @param amountMinimum The minimum amount of WNativeToken to unwrap\n    /// @param recipient The address receiving NativeToken\n    function unwrapWNativeToken(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any NativeToken balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundNativeToken() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
    },
    "@cryptoalgebra/integral-periphery/contracts/interfaces/IPoolInitializer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes Algebra Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\n/// https://github.com/Uniswap/v3-periphery\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/CommonERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract CommonERC20 is ERC20 {\n    constructor (string memory name, string memory symbol, uint256 _totalSupply) ERC20(name, symbol) {\n        _mint(msg.sender, _totalSupply);\n    }\n}"
    },
    "contracts/PresaleMaker.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.7;\n\nimport \"./CommonERC20.sol\";\nimport {IAlgebraPluginFactory} from \"@cryptoalgebra/integral-core/contracts/interfaces/plugin/IAlgebraPluginFactory.sol\";\nimport {IAlgebraFactory} from \"@cryptoalgebra/integral-core/contracts/interfaces/IAlgebraFactory.sol\";\nimport {IAlgebraPool} from \"@cryptoalgebra/integral-core/contracts/interfaces/IAlgebraPool.sol\";\nimport {INonfungiblePositionManager} from \"@cryptoalgebra/integral-periphery/contracts/interfaces/INonfungiblePositionManager.sol\";\nimport {IWNativeToken} from \"@cryptoalgebra/integral-periphery/contracts/interfaces/external/IWNativeToken.sol\";\nimport {TickMath} from \"@cryptoalgebra/integral-core/contracts/libraries/TickMath.sol\";\nimport {PresaleManager, Presale} from \"./PresaleManager.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ncontract PresaleMaker is IERC721Receiver {\n    address public immutable WNativeToken;\n\n    IAlgebraPluginFactory pluginFactory = IAlgebraPluginFactory(address(0x313F9DEe835569F1AaEA51854818C72cD6302509));\n    uint8 pluginConfig = 0x00000000000000000000000000000000000000000000000000000000000000c1;\n\n    uint256 public fee = 1e16;\n    uint256 public ethFee = 5e14;\n    address private feeVault;\n    uint256 public minimalTotalSupply = 10000000e18;\n\n    IAlgebraFactory public factory;\n    INonfungiblePositionManager public positionManager;\n    PresaleManager public presaleManager;\n\n    constructor(\n        IAlgebraFactory _factory,\n        INonfungiblePositionManager _positionManager,\n        address _WNativeToken,\n        PresaleManager _presaleManager,\n        address _feeVault\n    ) {\n        factory = _factory;\n        positionManager = _positionManager;\n        WNativeToken = _WNativeToken;\n        presaleManager = _presaleManager;\n        feeVault = _feeVault;\n    }\n\n    function create(\n        uint160 sqrtPriceX96,\n        string memory name,\n        string memory symbol,\n        uint256 totalSupply,\n        uint256 minterAllocation,\n        int24 bottomTick,\n        int24 topTick,\n        uint256 presaleAmount,\n        string memory data\n    ) external payable {\n        require(totalSupply > minimalTotalSupply, \"TokenMaker : totalSupply is too low\");\n        require(minterAllocation < totalSupply, \"TokenMaker : minterAllocation is too high\");\n        require(ethFee <= msg.value, \"TokenMaker : fee is too low\");\n\n        CommonERC20 token = new CommonERC20(name, symbol, totalSupply);\n        address poolAddress = factory.createPool(WNativeToken, address(token));\n        uint256 feeAmount = (totalSupply * fee) / 1e18;\n\n        token.transfer(feeVault, feeAmount);\n        payable(feeVault).transfer(ethFee);\n\n        if (minterAllocation > 0) {\n            token.transfer(msg.sender, minterAllocation);\n        }\n\n        uint256 lpAmount = token.balanceOf(address(this));\n        token.approve(poolAddress, lpAmount);\n        token.approve(address(positionManager), lpAmount);\n\n        IAlgebraPool _pool = IAlgebraPool(poolAddress);\n        _pool.initialize(sqrtPriceX96);\n\n        uint256 token0Amount;\n        uint256 token1Amount;\n        if (_pool.token0() == WNativeToken) {\n            token0Amount = 0;\n            token1Amount = lpAmount;\n        } else {\n            token0Amount = lpAmount;\n            token1Amount = 0;\n        }\n\n        (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1) = positionManager.mint(\n            INonfungiblePositionManager.MintParams(\n                _pool.token0(),\n                _pool.token1(),\n                bottomTick,\n                topTick,\n                token0Amount,\n                token1Amount,\n                0,\n                0,\n                address(this),\n                block.timestamp + 100\n            )\n        );\n        positionManager.transferFrom(address(this), address(presaleManager), tokenId);\n        presaleManager.putPresale(\n            Presale(\n                name,\n                symbol,\n                presaleAmount,\n                address(token),\n                address(_pool),\n                totalSupply,\n                minterAllocation,\n                data,\n                tokenId,\n                false\n            )\n        );\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n\n    function onERC721Received(\n        address operator,\n        address,\n        uint256 tokenId,\n        bytes calldata\n    ) external override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n\n"
    },
    "contracts/PresaleManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./CommonERC20.sol\";\nimport {IAlgebraPool} from \"@cryptoalgebra/integral-core/contracts/interfaces/IAlgebraPool.sol\";\nimport {INonfungiblePositionManager} from \"@cryptoalgebra/integral-periphery/contracts/interfaces/INonfungiblePositionManager.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"./PresaleReleaseExcutor.sol\";\n\ncontract PresaleManager is IERC721Receiver {\n    PresaleReleaseExcutor public releaseExecutor;\n    address public immutable WNativeToken;\n    mapping(address => Presale) public presales;\n    INonfungiblePositionManager public positionManager;\n\n    constructor(address _WNativeToken, INonfungiblePositionManager _positionManager) {\n        WNativeToken = _WNativeToken;\n        positionManager = _positionManager;\n        releaseExecutor = new PresaleReleaseExcutor(_positionManager, _WNativeToken, this);\n    }\n\n    function putPresale(Presale memory presale) external {\n        require(presales[presale.pair].presaleAmount == 0, \"PresaleManager: already exists\");\n        presales[presale.pair] = presale;\n        require(positionManager.ownerOf(presale.positionTokenId) == address(this), \"PresaleManager: invalid token id\");\n        \n        emit PresaleCreated(\n            msg.sender,\n            presale.name,\n            presale.symbol,\n            presale.presaleAmount,\n            presale.token,\n            presale.pair,\n            presale.totalSupply,\n            presale.minterAllocation,\n            presale.data\n        );\n    }\n\n    function getPresale(address pair) external view returns (Presale memory) {\n        return presales[pair];\n    }\n\n    function getProgress(address poolAddress) public view returns (uint256) {\n        IAlgebraPool pool = IAlgebraPool(poolAddress);\n        Presale memory presale = presales[poolAddress];\n        (uint256 reserve0, uint256 reserve1) = pool.getReserves();\n\n        if (pool.token0() == WNativeToken) {\n            return (100 * reserve0) / presale.presaleAmount;\n        } else {\n            return (100 * reserve1) / presale.presaleAmount;\n        }\n    }\n\n    function release(address poolAddress) external {\n        uint256 progress = getProgress(poolAddress);\n        require(progress >= 100, \"PresaleManager : progress is not enough\");\n        uint256 tokenId = presales[poolAddress].positionTokenId;\n        positionManager.transferFrom(address(this), address(releaseExecutor), tokenId);\n        releaseExecutor.release(poolAddress);\n    }\n\n    function onERC721Received(\n        address operator,\n        address,\n        uint256 tokenId,\n        bytes calldata\n    ) external returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    event PresaleCreated(\n        address from,\n        string name,\n        string symbol,\n        uint256 presaleAmount,\n        address token,\n        address pairAddress,\n        uint256 totalSupply,\n        uint256 minterAllocation,\n        string data\n    );\n}\n\nstruct Presale {\n    string name;\n    string symbol;\n    uint256 presaleAmount;\n    address token;\n    address pair;\n    uint256 totalSupply;\n    uint256 minterAllocation;\n    string data;\n    uint256 positionTokenId;\n    bool released;\n}"
    },
    "contracts/PresaleReleaseExcutor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.7;\n\nimport \"./CommonERC20.sol\";\nimport {IAlgebraPool} from \"@cryptoalgebra/integral-core/contracts/interfaces/IAlgebraPool.sol\";\nimport {INonfungiblePositionManager} from \"@cryptoalgebra/integral-periphery/contracts/interfaces/INonfungiblePositionManager.sol\";\nimport {IWNativeToken} from \"@cryptoalgebra/integral-periphery/contracts/interfaces/external/IWNativeToken.sol\";\nimport {TickMath} from \"@cryptoalgebra/integral-core/contracts/libraries/TickMath.sol\";\nimport {PresaleManager, Presale} from \"./PresaleManager.sol\";\n\ncontract PresaleReleaseExcutor {\n    address public immutable WNativeToken;\n\n    INonfungiblePositionManager public positionManager;\n    PresaleManager public presaleManager;\n\n    constructor(\n        INonfungiblePositionManager _positionManager,\n        address _WNativeToken,\n        PresaleManager _presaleManager\n    ) {\n        positionManager = _positionManager;\n        WNativeToken = _WNativeToken;\n        presaleManager = _presaleManager;\n    }\n\n    function release(address poolAddress) external {\n        require(msg.sender == address(presaleManager), \"TokenMaker : FORBIDDEN\");\n        Presale memory presale = presaleManager.getPresale(poolAddress);\n        require(presale.released == false, \"TokenMaker : presale is already released\");\n\n        PositionInfo memory position = getPositionInfo(presale.positionTokenId);\n        positionManager.decreaseLiquidity(\n            INonfungiblePositionManager.DecreaseLiquidityParams(\n                presale.positionTokenId,\n                position.liquidity,\n                0,\n                0,\n                block.timestamp + 100\n            )\n        );\n        positionManager.collect(\n            INonfungiblePositionManager.CollectParams(\n                presale.positionTokenId,\n                address(this),\n                type(uint128).max,\n                type(uint128).max\n            )\n        );\n        positionManager.burn(presale.positionTokenId);\n\n        IAlgebraPool pool = IAlgebraPool(poolAddress);\n        uint256 wethBalance = IWNativeToken(WNativeToken).balanceOf(address(this));\n        if (wethBalance > 0) {\n            IWNativeToken(WNativeToken).withdraw(wethBalance);\n        }\n\n        CommonERC20 token = CommonERC20(presale.token);\n        uint256 ethBalance = address(this).balance;\n        uint256 tokenBalance = token.balanceOf(address(this));\n        uint256 mintAmount0;\n        uint256 mintAmount1;\n        if (pool.token0() == WNativeToken) {\n            mintAmount0 = ethBalance;\n            mintAmount1 = tokenBalance;\n        } else {\n            mintAmount0 = tokenBalance;\n            mintAmount1 = ethBalance;\n        }\n\n        int24 tickSpacing = pool.tickSpacing();\n        token.approve(poolAddress, type(uint256).max);\n        token.approve(address(positionManager), type(uint256).max);\n        (uint256 newTokenId, uint128 _liquidity, uint256 _amount0, uint256 _amount1) = positionManager.mint{\n            value: ethBalance\n        }(\n            INonfungiblePositionManager.MintParams(\n                pool.token0(),\n                pool.token1(),\n                TickMath.MIN_TICK - (TickMath.MIN_TICK % tickSpacing),\n                TickMath.MAX_TICK - (TickMath.MAX_TICK % tickSpacing),\n                mintAmount0,\n                mintAmount1,\n                0,\n                0,\n                address(this),\n                block.timestamp + 100\n            )\n        );\n        positionManager.transferFrom(address(this), address(presaleManager), newTokenId);\n    }\n\n    function getPositionInfo(uint256 tokenId) internal view returns (PositionInfo memory) {\n        (\n            uint88 nonce,\n            address operator,\n            address token0,\n            address token1,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        ) = positionManager.positions(tokenId);\n        return\n            PositionInfo(\n                nonce,\n                operator,\n                token0,\n                token1,\n                tickLower,\n                tickUpper,\n                liquidity,\n                feeGrowthInside0LastX128,\n                feeGrowthInside1LastX128,\n                tokensOwed0,\n                tokensOwed1\n            );\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n\n    struct PositionInfo {\n        uint88 nonce;\n        address operator;\n        address token0;\n        address token1;\n        int24 tickLower;\n        int24 tickUpper;\n        uint128 liquidity;\n        uint256 feeGrowthInside0LastX128;\n        uint256 feeGrowthInside1LastX128;\n        uint128 tokensOwed0;\n        uint128 tokensOwed1;\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}